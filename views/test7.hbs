<div>
  <h1>Test #7 - Make a jQuery Plugin</h1>
  <p>
    Please combine the
    <code>MakeItemGreen()</code>
    and
    <code>MakeItemBigger()</code>
    functions into a jQuery plugin, so that the code
    <code>$("#box").hulkify()</code>
    produces the same result as calling the functions one after the other.
  </p>
  <p>
    Once the plugin is created, please replace the contents of the
    <code>$('#btnHulkify').bind("click"</code>
    function so that they call
    <code>$item.hulkify()</code>
    instead of the two functions.
  </p>
  <p> <strong>Note:</strong> <em>the plugin must be chainable.</em>
    So
    <code>$.hulkify().hide('slow')</code>
    must be working code.
  </p>

  <div style="display:inline-block">
    <h4>Hulkifed and Hide on button click</h4>
    <div id="box1" style="width:200px;height:200px;background-color:#ddd;">
      <p>i'm content in a box</p>
    </div>
    <input type="button" class="btn large primary" id="btnHulkify" value="hulkify and hide!" />
  </div>

  <div style="display:inline-block">
    <h4>Hulkifed and Hide on page load</h4>
    <div id="box2" style="width:200px;height:200px;background-color:#ddd;">
      <p>i'm content in a box</p>
    </div>
    <input type="button" class="btn large primary" id="btnReset" value="reset" />
  </div>

  <div style="display:inline-block">
    <h4>Just Hulkifed</h4>
    <div id="box3" style="width:200px;height:200px;background-color:#ddd;">
      <p>i'm content in a box</p>
    </div>
    <input type="button" class="btn large primary" id="btnHulkifyOnly" value="hulkify!" />
  </div>
</div>

<script type="text/javascript">
  // To avoid "potential" scoping issues with other libraries using the '$'. But who does that anyway?
  (function($) {
    // Define the plugin
    $.fn.hulkify = function() {
      var $this = $(this);

      if (!$this.length) {
        $this = $("#box2");
      }
      
      MakeItemGreen($this);
      MakeItemBigger($this);
      return $this;
    };

    // Add the plugin directly to the jQuery namespace. This allows for '$.hulkify()'
    // Without this, you would have to call it by `$('something').hulkify()`
    $.hulkify = function(item) {
      return $.fn.hulkify(item);
    };
  }(jQuery));

  function MakeItemGreen(item) {
    $(item).css({backgroundColor:"green"});
  };

  function MakeItemBigger(item){
    $(item).css({width:"+=100px",height:"+=100px"});
  };

  $(function () {
    /* Moment of truth
     * Note: calling it this way does not pass a context to the function in the same way 
     *    that `box.hulkify()` does. Thats why the plugin has a fallback and snags #box2 
     *    for the sake of the example. 
     */
    $.hulkify().hide('slow');
    
    $('#btnHulkify').click(function(){
      var box = $("#box1");
      box.hulkify().hide('slow');
    });

    $('#btnHulkifyOnly').click(function(){
      var box = $("#box3");
      box.hulkify();
    });

    $('#btnReset').click(function() {
      $('#box1, #box2').css({width:'200px', height:'200px', backgroundColor: '#ddd'}).show();
    });
  });
</script> 
